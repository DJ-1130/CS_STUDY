## 📌 HTTP

### **HTTP 프로토콜**

클라이언트와 서버 간 통신을 위한 통신 규칙 세트 또는 프로토콜

### **HTTP의 요청/응답 모델**

HTTP를 통한 통신은 요청(request) <---> 응답(response) 구조로 되어있다.

통신은 서버와 클라이언트, 서버와 서버 간의 통신이 이루어진다.

!https://blog.kakaocdn.net/dn/XXo5V/btst0c5tz5Z/QPVHrkgRIxck35fOdaQMdk/img.png

위 그림과 같이, 클라이언트가 서버에 요청(request)을 보내면, 
서버는 요청(request)에 대한 응답(response)을 보낸다.

| HTTP 요청(request) 구조 | HTTP 응답(response) 구조 |
| --- | --- |
| **Start line:** HTTP 메서드 / URL / HTTP 버전 | **Status line:** 프로토콜 버전, 상태 코드, 상태 텍스트 |
| **Headers:** 요청에 대한 설명, 혹은 메시지 본문에 대한 설명                 
▪ General Header: 일반적인 메시지 정보                 
▪ Request Header: 요청 정보          
▪ Entity Header: 메시지의 엔티티 관련 정보 | **Headers:** 응답에 대한 설명, 혹은 메시지 본문에 대한 설명                 
▪ General Header: 일반적인 메시지 정보                 
▪ Response Header: 응답 정보        
▪ Entity Header: 메시지의 엔티티 관련 정보 |
| **Body:** 모든 요청에 Body가 들어가지는 않음            서버로 데이터 전송을 할 때 주로 작성            
▪ 단일 리소스(Single-resource bodies)            
▪ 다중 리소스(Multiple-resource bodies) | **Body:** 모든 응답에 Body가 들어가지는 않음            
▪ 단일 리소스(Single-resource bodies)                  
- length 정보가 알려진 단일 파일        
- length 정보를 모르는 단일 파일            
▪ 다중 리소스(Multiple-resource bodies) |

### **HTTP 메서드**

클라이언트와 서버 사이의 요청(request)과 응답(response) 데이터를 전송하는 방식

**♣** HTTP 메서드 종류(*. 주로 사용하는 메서드에 밑줄)

- GET: 서버에서 리소스 가져올 때 사용
- POST: 서버로 데이터 보낼 때 사용, 요청 데이터 처리
- PUT: 새로운 리소스 생성 및 기존 리소스 업데이트할 때 사용
- PATCH: 서버에서 일부 리소스 업데이트 할 때 사용
- DELETE: 리소스 삭제할 때 사용
- HEAD: GET과 유사하나, Body는 반환하지 않고 Status line과 Header 정보만 반환함
- OPTIONS: 서버에서 지원하는 메서드 및 기타 기능 확인을 위해 사용, 주로 CORS 요청에서 사용
- CONNECT: 목적지 서버에 대한 네트워크 연결 설정을 위해 사용, Proxy 서버와의 터너링에 사용
- TRACE: 요청 정보에 대한 디버깅 및 진단을 위해 사용

### **HTTP 메서드 비교**

| **GET vs POST** |  | **PUT vs PATCH** |  |
| --- | --- | --- | --- |
| GET | POST | PUT | PATCH |
| 정보 요청 및 데이터 읽기 | 서버에 데이터 제출 | 리소스 전체 업데이트 | 리소스 일부 업데이트 |
| 데이터가 URL에 포함 | 데이터가 요청 Body에 포함 |  |  |
| 결과 캐싱 가능(재요청X) | 결과 캐싱되지 않음(재요청O) |  |  |

### **HTTP 상태 코드**

클라이언트가 서버에 요청 보낼 때, 그 요청의 결과를 나타내는 것

♣ 상태코드 종류(*. 주로 보던 것 위주로 정리)

- 200(OK): 서버 요청 성공적으로 처리
- 201(Created): 요청 처리 후 새로운 리소스 생성
- 304 (Not Modified): 요청된 리소스를 재전송할 필요가 없음
- 400(Bad Request): 잘못된 요청
- 401(Unauthorized): 해당 리소스에 대한 액세스 권한 없음
- 403(Forbidden): 해당 리소스에 대한 액세스 금지
- 404(Not Found): 해당 리소스 찾을 수 없음
- 500(Internal Server Error): 서버에서 에러 발생
- 501(Not Implemented): 요청 메서드에 대해 서버가 구현하고 있지 않음
- 502(Bad Gateway): 서버로부터 잘못된 응답
- 504(Gateway Timeout): 서버로부터 응답 기다리다가 시간 초과

### **HTTP의 무상태성(Stateless)**

HTTP는 Stateless로, 상태(state)를 저장하지 않는다. 다시 말해, 요청이나 응답하는 정보가 저장되지 않는다는 뜻이다.

클라이언트가 요청을 보내고 응답을 받은 후, 그 다음에 다시 요청을 보낼 때 그 전에 보낸 요청/응답에 대해 알지 못한다.

### **HTTP Keep-Alive**

HTTP/1.1 프로토콜부터 도입된 기능으로, Keep-Alive는 클라이언트와 서버 간의 단일 TCP 연결을 재사용하여 여러 개의 HTTP 요청과 응답을 주고받을 수 있도록 한다.

- 지속적인 연결(Persistent Connection) 또는 연결 재사용(Connection Reuse)이라고도 불린다.
- 장점: 재사용성, 성능 향상, 자원 공유 etc.

Keep-Alive를 사용하는 경우 다음과 같이 HTTP 요청 Header에 Connection: Keep-Alive라는 값을 포함해야 한다.

```bash
HTTP/1.1 200 OK
Connection: Keep-Alive
...
Keep-Alive: timeout=5, max=1000
...
```

### **HTTP 파이프라이닝(Pipelining)**

응답을 기다리지 않고 단일 TCP 연결을 통해 여러 HTTP 요청을 동시에 병렬처리하여 보내는 기술

- 장점: 빠른 데이터 전송, 클라이언트-서버 간 대기시간 감소

### **HTTP 버전별 특징**

| **HTTP/1.1** | **HTTP/2** | **HTTP/3** |
| --- | --- | --- |
| Keep-Alive(Persistent Connection) | 서버 푸시(Server Push) | QUIC 프로토콜 기반 |
| 파이프라이닝(Pipelining) | 다중 스트림(Multiplexing) | 헤더 압축(Header Compression) |
| 캐싱(Caching) | 헤더 압축(Header Compression) | 다중 스트림(Multiplexing) |
|  | 흐름 제어(Flow Control) | 우선순위 지정(Stream Prioritization) |
|  | 우선순위 지정(Stream Prioritization) | 혼잡 제어(Congestion Control) |

**다중 스트림(Multiplexing):** 동시에 여러 개의 요청과 응답 처리

**서버 푸시(Server Push):** 서버가 클라이언트 요청 없이 리소스를 보냄으로써 페이지 로딩 속도 개선

**우선순위 지정(Stream Prioritization):** 중요한 리소스가 먼저 로딩되도록 함

**헤더 압축(Header Compression):** 대역폭 사용량을 최소화하고 빠른 통신 제공

**QUIC(Quick UDP Internet Connections) 프로토콜:** 비연결형 UDP를 사용하여 TCP 연결 및 해제와 관련된 지연시간 줄이고 더 안정적인 연결 제공

## 📌 **HTTPS**

### **HTTPS란**

HTTPS(Hypertext Transfer Protocol Secure)란 웹 클라이언트와 서버 간 데이터를 전송하는 과정에서 암호화 및 인증을 위한 SSL/TLS 프로토콜을 사용하는 HTTP 프로토콜의 보안 버전이다.

즉, HTTPS는 데이터 전송의 보안을 강화하기 위해 암호화되는 것으로, 이를 사용하면 웹 사이트 사용자가 인터넷을 통해 신용 카드 번호, 은행 정보 및 로그인 자격 증명과 같은 중요한 데이터를 안전하게 전송할 수 있다.

### **SSL과 TLS**

SSL(Secure Sockets Layer)은 디지털 인증서라고도 불리며, 클라이언트와 서버 간 전송되는 데이터를 암호화하여 인터넷 연결을 보호하기 위한 표준 기술이다. 이는 타인이 개인 데이터나 금융 데이터 등의 전송되는 정보를 보거나 훔치는 것을 방지하고 특정 유형의 사이버 공격도 차단한다.

TLS(Transport Layer Security)는 SSL보다 더욱 안전한 향상된 버전으로 SSL의 최종 버전인 3.0과 TLS의 최초 버전의 차이는 크지 않으며, 단지 SSL을 개발한 Netscape가 업데이트에 참여하지 않게 되어 소유권 변경을 위해 이름이 바뀐 것이라고 한다. 따라서, TLS는 SSL의 업데이트 버전이며 명칭만 다르다고 볼 수 있다.

위 프로토콜들은 HTTPS에서 사용하는데, HTTP에 보안 프로토콜인 SSL/TLS를 설정하여 암호화 통신이 되도록 한다.

### **HTTPS 암호화 과정**

HTTPS의 암호화 과정은 다음과 같다.

1. SSL/TLS Handshake
2. 공개 키(Public Key) 교환
3. 대칭 키 암호화(Symmetric Key Encryption)
4. 데이터 송수신
5. 세션 종료
- **CA(Certificate Authority):** Certificate Authority는 공개키와 공개 DNS명의 연결을 보장하는 기관이다. CA는 이들만의 암호화 키로 웹 사이트의 공개키를 암호학적으로 사인하는 데 사용함으로써 특정 공개키가 특정 사이트의 공개키라는 것을 보장해준다.

### **SSL Handshake의 동작 과정**

SSL의 Handshake는 클라이언트와 서버 간의 메시지 교환으로, HTTPS 웹에 처음 연결할 때 진행된다.

Handshake의 단계는 클라이언트와 서버에서 지원하는 암호화 알고리즘 및 키 교환 알고리즘에 따라 달라진다.

대부분은 아래의 내용에서 크게 벗어나지 않으며, 보통 SSL 인증서에는 공개키와 대칭키 방식 두 가지 모두 사용된다.

!https://blog.kakaocdn.net/dn/eLF4Ij/btsuGjhCD1O/GBgfpKFkKkPkgfC6Z7XqGK/img.png

### SSL Handshake 동작 과정

**① cipher suite -** 보안의 궁극적 목표를 달성하기 위해 사용하는 방식을 패키지의 형태로 묶어 놓은 것

(키 교환 암호 알고리즘_인증알고리즘_WITH_대칭 암호 알고리즘_블록 암호 운용 방식_해시 알고리즘)

**② SSL 인증서:** 이 인증서는 CA의 비밀키로 암호화되어 발급된 상태

**③ 인증서 확인:** 대부분의 브라우저에는 공신력있는 CA들의 정보와 CA가 만든 공개키가 이미 설치되어 있기 때문에, 내장된 CA 공개키를 사용하여 암호화된 SSL 인증서를 복호화하여 정말로 CA가 만든 것인지 확인

**④ Premaster Secret 생성 및 암호화:** 서버 SSL인증서에서 딸려온 웹 사이트의 공개키로 이를 암호화하여 서버로 전송

**⑤ Premaster Secret 복호화:** 복호화한 값을 Master Secret 값으로 저장. 이를 이용해 서버와 브라우저 간의 연결에 있어 고유한 값을 부여하기 위한 Session Key 생성. 이는 대칭키 암호화에 사용할 Key로, 이를 사용해 서버와 브라우저 사이에 주고 받는 데이터를 암호화하고 복호화함

**⑥ SSL Handshake 종료 및 HTTPS 통신 시작:** SSL Handshake가 정상적으로 완료됨. 이제 Session Key를 사용해 암호화 및 복호화를 하며 HTTPS 프로토콜을 통해 데이터 주고 받기 가능. HTTPS 통신은 Session Key를 이용한 대칭키 방식을 사용하며, HTTPS 통신 완료 시점에서 서로에게 공유된 Session Key는 폐기함

**대칭키와 비대칭키**

- **대칭키 암호화 방식(Symmetric Key Encryption)**
    - 대칭키 암호화 방식은 같은 키를 사용하여 데이터를 암호화 및 복호화 하는 데 사용하는 방식
    - 암호화된 데이터를 보내는 측과 받는 측이 동일한 키를 공유해야 함
    - 암호화 및 복호화 속도가 빠르고 대량의 데이터를 효율적으로 처리 가능
    - e.g, 블록 대칭키 암호화 방식: AES, DES
- **비대칭키 암호화 방식(Asymmetric Key Encryption)**
    - 비대칭키 암호화 방식은 공개 키(Public Key)와 개인 키(Private Key) 두 개의 다른 키 쌍을 사용
    - 데이터 암호화 할 때 공개 키로 암호화를 하면, 개인 키로만 복호화 가능
    - 반대로 개인 키로 암호화하면, 공개 키로만 복호화 가능
    - 기밀성과 무결성 보장하는 데 사용
    - 주로 인증 및 키 교환에 사용
    - e.g, DH(Diffie-Hellman) 키 교환, RSA, DSA
    - 공개키 암호화 방식이라고도 함
- **HTTPS에서 사용되는 암호화 방식**
    - 공통키(대칭키 암호화 방식) + 공개키(비대칭 암호화 방식)
    - 공통키 암호화 방식만 사용하기에는 공개키에 비해 보안상 취약함
    - 공개키 암호화 방식만 사용하기에는 계산 과정이 복잡하여 속도가 느리고 메시지 암호화 및 복호화 과정 중 많은 자원이 사용됨
    - 따라서 실제 IT 시스템에서는 공통키 방식과 공개키 방식을 혼합하여 사용

## 📌 DNS

### DNS가 뭔가요?

**DNS란?**

DNS(Domain Name System)란 이름을 IP 주소로 변환하여 도메인 이름을 웹 브라우저에 입력할 때 최종 사용자를 어떤 서버에 연결할 것인지 제어하도록 해주는, 즉 쿼리할 수 있게 해주는 계층형 분산 데이터베이스이다.

다시 말해, DNS는 사용자가 숫자로 된 인터넷 프로토콜 주소를 사용하는 대신 인터넷 도메인 이름과 검색 가능한 URL을 사용하여 웹 사이트에 접속하는 것을 가능하게 한다.

예를 들어, 93.184.216.34와 같은 IP 주소를 기억하는 대신 www.example.com을 검색하여 웹 사이트 접속이 가능하다.

!https://blog.kakaocdn.net/dn/c2sIpQ/btsuk2anGGH/sZMDm5E4mQJVh1G4CPXkj0/img.png

### DNS 작동 방식에 대해 설명해주세요.

**DNS 작동 원리**

DNS 서버에서 도메인 / IP 주소를 얻는 과정은 생각보다 복잡한데,

그 이유는 전 세계의 도메인 수가 매우 많기 때문에 DNS 서버 종류를 계층화하여 단계적으로 처리하기 위함이다.

다음은 DNS 작동 원리이다.

!https://blog.kakaocdn.net/dn/FiTct/btsugTkqMVH/RkYhkUb31FX492jjOeGvWK/img.png

### DNS 작동 원리

1. 브라우저에 www.naver.com 을 입력하면 PC에 저장된 Local DNS에게 "www.naver.com"라는 호스트명에 대한 IP 주소를 질의하여 Local DNS에 해당 IP에 대한 접속 정보가 캐싱되어 있다면, 바로 PC에 IP 주소를 전달(8번) 그렇지 않으면 Local DNS는 다른 DNS 서버들과 통신(2~7번, DNS 쿼리)
2. 먼저 Root DNS 서버에 "www.naver.com"의 IP 주소 질의
3. Root DNS 서버에 해당 IP주소를 찾을 수 없으면, com 도메인을 관리하는 TLD DNS 서버의 IP 주소를 전달
4. 다음으로 com 도메인을 관리하는 TLD DNS 서버에 다시 "www.naver.com"의 IP 주소 질의
5. TLD DNS 서버에 해당 IP주소를 찾을 수 없으면, naver.com DNS 서버(책임 DNS 서버)의 IP 주소를 전달
6. 다음으로 naver.com DNS 서버(책임 DNS 서버)에 "www.naver.com"의 IP 주소 질의
7. 해당 책임 DNS 서버에는 "www.naver.com"의 IP 주소가 있으므로 "222.122.185.6"이라는 IP 주소를 전달
8. Local DNS는 전달 받은 "www.naver.com"의 IP 주소를 PC(호스트)에 전달

### DNS 질의 종류에 대해 설명해주세요.

**DNS 질의 종류(쿼리)**

- 재귀적 질의(Recursive Query): Local DNS 서버가 다른 DNS 서버에 쿼리를 보내어 답을 요청하는 작업

!https://blog.kakaocdn.net/dn/bXYwgF/btsuenMDPmx/HfAsmGtnmHyq2oqSVONr2K/img.png

- 반복적 질의(Iterative Query): Local DNS 서버가 여러 DNS 서버를 차례대로 물어봐서 그 답을 찾는 과정

!https://blog.kakaocdn.net/dn/bgoiTa/btsuh28MXK6/LvzKINchZlQeIbKp43uKlK/img.png

### DNS 서버에게 IP 주소를 요청할 때, 왜 UDP를 사용하나요?

1. UDP는 제한된 크기를 갖고 있어 작은 데이터 패킷을 사용하게 만들고, 이러한 특징은 DNS의 쿼리와 응답과 같이 일반적으로 작은 데이터를 주고 받는 프로토콜에 적합
2. DNS는 대부분 빠른 응답이 요구되는 프로토콜이기 때문에 UDP는 연결 설정 및 해제 기능이 있는 TCP와 달리 지연이 없는 비연결형 프로토콜로써 빠른 응답을 제공하므로 DNS에 적합
3. 이처럼 UDP는 비연결형에 전송 속도가 빠르기 때문에 오버헤드가 적어서 DNS 사용에 더욱 효율적

### DNS 레코드가 무엇인가요?

DNS 레코드는 도메인의 데이터베이스에 저장하는 데이터이다. 이는 웹사이트가 호스팅되는 방식과 웹사이트에 액세스할 수 있는 항목을 정의한다.

쉽게 말해, DNS 레코드는 DNS에서 사용되는 정보 조각을 말하며, 이 정보는 도메인 이름과 관련된 여러 유형의 데이터를 포함하며, 주로 다음과 같은 정보를 저장한다.

| A(Address) | 도메인에 대한 IPv4 주소 질의 (A record 질의) |
| --- | --- |
| AAAA | 도메인에 대한 IPv6 주소 질의 |
| ANY | 도메인에 대한 모든 Record 질의요청 대비 응답이 크기 때문에 DNS 증폭(DRDoS) 공격에 악용 |
| MX(Mail Exchanger) | 도메인의 메일서버 질의 (MX Record 질의) |
| NS(Name Server) | 도메인의 네임서버 질의 (NS Record 질의) |
| SOA(Start Of Authority) | Zone의 시작을 표현하는 Record로 Zone 기본 속성 정보(Zone 파일 버전, Zone 전송 주기 등) 질의 (SOA Record 질의) |
| TXT(Text) | 도메인에 대한 텍스트 정보 질의 (TXT Record 질의) |
| SRV(Service) | 특정 서비스(e.g, VoIP, 채팅)를 위한 서비스 위치 정보 검색을 위한 질의 (Service Record 질의) |
| HINFO(Host Information) | 호스트의 CPU, OS 정보 |
| CNAME(Canonical Name) | 호스트의 별명 (Alias) |
| PTR(Pointer) | IP에 대한 도메인 정보 질의 (A 유형의 반대)Reverse Zone file에 설정된 PTR Record를 질의 |
| AXFR(Authoritative Zone Transfer) | Zone 버전에 상관없이 무조건 Zone 전송 요청 (Full Zone Transfer)형식: dig @ "마스터 네임 서버 주소" "zone name" axfr         e.g, dig @192.168.10.100 test.com axfr |
| IXFR(Incremental Zone Transfer) | Zone 버전을 비교하여, 상위 버전일 경우에만 Zone 전송 요청 (Incremental Zone Transfer)형식: dig @ "마스터 네임 서버 주소" "zone name" ixfr=버전정보         e.g, dig @192.168.10.100 test.com ixfr=2021050701 |
